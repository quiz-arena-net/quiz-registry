// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: quiz_arena/quiz_registry/v1/quiz_registry.proto

package quiz_registryv1connect

import (
	connect "connectrpc.com/connect"
	_ "github.com/quiz-arena-net/quiz-registry/gen/quiz_arena/quiz_registry/v1"
	http "net/http"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// QuizRegistryServiceName is the fully-qualified name of the QuizRegistryService service.
	QuizRegistryServiceName = "quiz_arena.quiz_registry.v1.QuizRegistryService"
)

// QuizRegistryServiceClient is a client for the quiz_arena.quiz_registry.v1.QuizRegistryService
// service.
type QuizRegistryServiceClient interface {
}

// NewQuizRegistryServiceClient constructs a client for the
// quiz_arena.quiz_registry.v1.QuizRegistryService service. By default, it uses the Connect protocol
// with the binary Protobuf Codec, asks for gzipped responses, and sends uncompressed requests. To
// use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or connect.WithGRPCWeb()
// options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewQuizRegistryServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) QuizRegistryServiceClient {
	return &quizRegistryServiceClient{}
}

// quizRegistryServiceClient implements QuizRegistryServiceClient.
type quizRegistryServiceClient struct {
}

// QuizRegistryServiceHandler is an implementation of the
// quiz_arena.quiz_registry.v1.QuizRegistryService service.
type QuizRegistryServiceHandler interface {
}

// NewQuizRegistryServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewQuizRegistryServiceHandler(svc QuizRegistryServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	return "/quiz_arena.quiz_registry.v1.QuizRegistryService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedQuizRegistryServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedQuizRegistryServiceHandler struct{}
